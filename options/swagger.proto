syntax = "proto3";

package com.pseudomuto.protoc_gen_twagger.options;
option go_package = "options";

message OpenAPI {
  reserved 3; // reserved for security

  string openapi                      = 1; // REQUIRED. This string MUST be the semantic version of the OpenAPI Specification.
  Info info                           = 2; // REQUIRED. Provides metadata about the API.
  repeated Server servers             = 4; // An array of server objects.
  repeated Tag tags                   = 5; // A list of tags used by the specification with additional metadata.

  map<string, Path> paths             = 6; // REQUIRED. The available paths and operations for the API.
	Components components               = 7; // The reusable components for the API.
  ExternalDocumentation external_docs = 8; // Additional external documentation.
}

message Info {
  string title            = 1; // REQUIRED. The title of the application.
  string description      = 2; // A short description of the application.
  string terms_of_service = 3; // A URL to the Terms of Service for the API.
  Contact contact         = 4; // The contact information for the exposed API.
  License license         = 5; // The license information for the exposed API.
  string version          = 6; // REQUIRED. The version of the OpenAPI document.
}

message Contact {
  string name  = 1; // The identifying name of the contact person/organization.
  string url   = 2; // The URL pointing to the contact information.
  string email = 3; // email address of the contact person/organization.
}

message License {
  string name  = 1; // REQUIRED. The license name used for the API.
  string url   = 2; // A URL to the license used for the API.
}

message Server {
  string url                            = 1; // REQUIRED. A URL to the target host.
  string description                    = 2; // An optional string describing the host designated by the URL.
  map<string, ServerVariable> variables = 3; // A map between a variable name and its value.
}

message ServerVariable {
  repeated string enum = 1; // An enumeration of string values to be used if the options are from a limited set.
  string default       = 2; // REQUIRED. The default value to use for substitution.
  string description   = 3; // An optional description for the server variable.
}

message Tag {
  string name                         = 1; // REQUIRED. The name of the tag.
  string description                  = 2; // A short description for the tag.
  ExternalDocumentation external_docs = 3; // Additional external documentation for this tag.
}

message ExternalDocumentation {
  string url         = 1; // REQUIRED. The URL for the target documentation.
  string description = 2; // A short description of the target documentation.
}

message Path {
  string summary     = 1; // An optional, summary, intended to apply to all operations in this path.
	string description = 2; // An optional, description, intended to apply to all operations in this path.
	Operation delete   = 3; // A definition of a DELETE operation on this path.
	Operation get      = 4; // A definition of a GET operation on this path.
	Operation head     = 5; // A definition of a HEAD operation on this path.
	Operation options  = 6; // A definition of a OPTIONS operation on this path.
	Operation patch    = 7; // A definition of a PATCH operation on this path.
	Operation post     = 8; // A definition of a POST operation on this path.
	Operation put      = 9; // A definition of a PUT operation on this path.
	Operation trace    = 10; // A definition of a TRACE operation on this path.
}

message Operation {
  repeated string tags                = 1; // A list of tags for API documentation control.
	string summary                      = 2; // A summary of what the operation does.
	string description                  = 3; // A verbose explanation of the operation.
  ExternalDocumentation external_docs = 4; // Additional external documentation for this operation.
	string operation_id                 = 5; // A unique string to identify the operation.
}

message Components {
  map<string, Schema> schemas = 1; // An object to hold reusable schemas.
}

message Schema {
	string description             = 1; // The description of the schema.
  string type                    = 2; // The schema type (e.g. "object", "string", etc.).
	map<string, Schema> properties = 3; // The properties of this schema.
	repeated string required       = 4; // The set of required fields.
	string format                  = 5; // The format of this schema ("date-time", "password", etc.).
	string ref                     = 6; // The reference string.
}
